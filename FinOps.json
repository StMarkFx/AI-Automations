{
    "name": "Financial Operations Workflow",
    "nodes": [
      {
        "parameters": {
          "rule": {
            "interval": [
              {
                "field": "days",
                "triggerAtNumber": 1
              }
            ]
          }
        },
        "name": "Daily Financial Processing",
        "type": "n8n-nodes-base.scheduleTrigger",
        "typeVersion": 1,
        "position": [
          240,
          300
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT * FROM pending_invoices WHERE due_date <= CURRENT_DATE + INTERVAL '7 days' AND status = 'DRAFT'",
          "additionalFields": {}
        },
        "name": "Get Pending Invoices",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          300
        ]
      },
      {
        "parameters": {
          "operation": "iterateAll",
          "batchSize": 5,
          "options": {}
        },
        "name": "Process Each Invoice",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 1,
        "position": [
          680,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Generate invoice number\nconst prefix = \"INV\";\nconst date = new Date();\nconst year = date.getFullYear().toString().substr(-2);\nconst month = (date.getMonth() + 1).toString().padStart(2, '0');\nconst day = date.getDate().toString().padStart(2, '0');\nconst randomId = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\n\n// Create invoice number\nconst invoiceNumber = `${prefix}-${year}${month}${day}-${randomId}`;\n\n// Calculate tax amount\nconst subtotal = $input.item.json.amount;\nconst taxRate = 0.1; // 10% tax\nconst taxAmount = subtotal * taxRate;\nconst total = subtotal + taxAmount;\n\n// Add to the item\n$input.item.json.invoiceNumber = invoiceNumber;\n$input.item.json.taxAmount = taxAmount;\n$input.item.json.total = total;\n$input.item.json.generatedDate = date.toISOString();\n$input.item.json.dueDate = new Date(date.setDate(date.getDate() + 30)).toISOString(); // Due in 30 days\n\nreturn $input.item;"
        },
        "name": "Generate Invoice Details",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          900,
          300
        ]
      },
      {
        "parameters": {
          "templateId": "=invoice_template_{{$json[\"client_type\"]}}",
          "options": {}
        },
        "name": "Generate PDF Invoice",
        "type": "n8n-nodes-base.pdfjsNode",
        "typeVersion": 1,
        "position": [
          1120,
          300
        ]
      },
      {
        "parameters": {
          "authentication": "predefinedCredentialType",
          "operation": "executeQuery",
          "query": "=UPDATE pending_invoices SET status = 'SENT', invoice_number = '{{$json[\"invoiceNumber\"]}}', generated_date = '{{$json[\"generatedDate\"]}}' WHERE id = {{$json[\"id\"]}}"
        },
        "name": "Update Invoice Status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1340,
          180
        ]
      },
      {
        "parameters": {
          "fromEmail": "=accounting@company.com",
          "toEmail": "={{$json[\"client_email\"]}}",
          "subject": "=Invoice #{{$json[\"invoiceNumber\"]}} from Your Company",
          "text": "=Dear {{$json[\"client_name\"]}},\n\nPlease find attached your invoice #{{$json[\"invoiceNumber\"]}} for ${{$json[\"total\"].toFixed(2)}}.\n\nInvoice Details:\n- Subtotal: ${{$json[\"amount\"].toFixed(2)}}\n- Tax (10%): ${{$json[\"taxAmount\"].toFixed(2)}}\n- Total: ${{$json[\"total\"].toFixed(2)}}\n- Due Date: {{new Date($json[\"dueDate\"]).toLocaleDateString()}}\n\nPayment Options:\n- Bank Transfer: ACC-123456789\n- Credit Card: Click the payment link in your client portal\n\nThank you for your business.\n\nRegards,\nAccounting Department\nYour Company",
          "options": {
            "attachments": [
              {
                "binary": "data"
              }
            ]
          }
        },
        "name": "Send Invoice Email",
        "type": "n8n-nodes-base.emailSend",
        "typeVersion": 1,
        "position": [
          1340,
          380
        ]
      },
      {
        "parameters": {
          "channel": "#accounting",
          "text": "=:page_facing_up: *New Invoice Generated*\n\n*Invoice #:* {{$json[\"invoiceNumber\"]}}\n*Client:* {{$json[\"client_name\"]}}\n*Amount:* ${{$json[\"total\"].toFixed(2)}}\n*Due Date:* {{new Date($json[\"dueDate\"]).toLocaleDateString()}}"
        },
        "name": "Send Invoice Notification",
        "type": "n8n-nodes-base.slack",
        "typeVersion": 1,
        "position": [
          1560,
          300
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT * FROM payments WHERE status = 'PENDING_RECONCILIATION'",
          "additionalFields": {}
        },
        "name": "Get Unreconciled Payments",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          240,
          540
        ]
      },
      {
        "parameters": {
          "authentication": "predefinedCredentialType",
          "operation": "list",
          "version": "v2.0"
        },
        "name": "Get Bank Transactions",
        "type": "n8n-nodes-base.paypal",
        "typeVersion": 1,
        "position": [
          460,
          540
        ]
      },
      {
        "parameters": {
          "jsCode": "// Match payments with bank transactions\nconst unreconciled = $node[\"Get Unreconciled Payments\"].json;\nconst transactions = $node[\"Get Bank Transactions\"].json;\n\nconst matched = [];\nconst unmatched = [];\n\n// Loop through each unreconciled payment\nfor (const payment of unreconciled) {\n  // Try to find matching transaction\n  const match = transactions.find(tx => {\n    // Match by amount and reference number\n    return tx.amount === payment.amount && \n           tx.reference.includes(payment.reference);\n  });\n  \n  if (match) {\n    matched.push({\n      payment_id: payment.id,\n      transaction_id: match.id,\n      amount: payment.amount,\n      status: 'RECONCILED',\n      reconciled_date: new Date().toISOString()\n    });\n  } else {\n    unmatched.push(payment);\n  }\n}\n\nreturn { matched, unmatched };"
        },
        "name": "Reconcile Payments",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          680,
          540
        ]
      },

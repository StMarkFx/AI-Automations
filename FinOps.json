{
    "name": "Financial Operations Workflow",
    "nodes": [
      {
        "parameters": {
          "rule": {
            "interval": [
              {
                "field": "days",
                "triggerAtNumber": 1
              }
            ]
          }
        },
        "name": "Daily Financial Processing",
        "type": "n8n-nodes-base.scheduleTrigger",
        "typeVersion": 1,
        "position": [
          240,
          300
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT * FROM pending_invoices WHERE due_date <= CURRENT_DATE + INTERVAL '7 days' AND status = 'DRAFT'",
          "additionalFields": {}
        },
        "name": "Get Pending Invoices",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          300
        ]
      },
      {
        "parameters": {
          "operation": "iterateAll",
          "batchSize": 5,
          "options": {}
        },
        "name": "Process Each Invoice",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 1,
        "position": [
          680,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Generate invoice number\nconst prefix = \"INV\";\nconst date = new Date();\nconst year = date.getFullYear().toString().substr(-2);\nconst month = (date.getMonth() + 1).toString().padStart(2, '0');\nconst day = date.getDate().toString().padStart(2, '0');\nconst randomId = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\n\n// Create invoice number\nconst invoiceNumber = `${prefix}-${year}${month}${day}-${randomId}`;\n\n// Calculate tax amount\nconst subtotal = $input.item.json.amount;\nconst taxRate = 0.1; // 10% tax\nconst taxAmount = subtotal * taxRate;\nconst total = subtotal + taxAmount;\n\n// Add to the item\n$input.item.json.invoiceNumber = invoiceNumber;\n$input.item.json.taxAmount = taxAmount;\n$input.item.json.total = total;\n$input.item.json.generatedDate = date.toISOString();\n$input.item.json.dueDate = new Date(date.setDate(date.getDate() + 30)).toISOString(); // Due in 30 days\n\nreturn $input.item;"
        },
        "name": "Generate Invoice Details",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          900,
          300
        ]
      },
      {
        "parameters": {
          "templateId": "=invoice_template_{{$json[\"client_type\"]}}",
          "options": {}
        },
        "name": "Generate PDF Invoice",
        "type": "n8n-nodes-base.pdfjsNode",
        "typeVersion": 1,
        "position": [
          1120,
          300
        ]
      },
      {
        "parameters": {
          "authentication": "predefinedCredentialType",
          "operation": "executeQuery",
          "query": "=UPDATE pending_invoices SET status = 'SENT', invoice_number = '{{$json[\"invoiceNumber\"]}}', generated_date = '{{$json[\"generatedDate\"]}}' WHERE id = {{$json[\"id\"]}}"
        },
        "name": "Update Invoice Status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1340,
          180
        ]
      },
      {
        "parameters": {
          "fromEmail": "=accounting@company.com",
          "toEmail": "={{$json[\"client_email\"]}}",
          "subject": "=Invoice #{{$json[\"invoiceNumber\"]}} from Your Company",
          "text": "=Dear {{$json[\"client_name\"]}},\n\nPlease find attached your invoice #{{$json[\"invoiceNumber\"]}} for ${{$json[\"total\"].toFixed(2)}}.\n\nInvoice Details:\n- Subtotal: ${{$json[\"amount\"].toFixed(2)}}\n- Tax (10%): ${{$json[\"taxAmount\"].toFixed(2)}}\n- Total: ${{$json[\"total\"].toFixed(2)}}\n- Due Date: {{new Date($json[\"dueDate\"]).toLocaleDateString()}}\n\nPayment Options:\n- Bank Transfer: ACC-123456789\n- Credit Card: Click the payment link in your client portal\n\nThank you for your business.\n\nRegards,\nAccounting Department\nYour Company",
          "options": {
            "attachments": [
              {
                "binary": "data"
              }
            ]
          }
        },
        "name": "Send Invoice Email",
        "type": "n8n-nodes-base.emailSend",
        "typeVersion": 1,
        "position": [
          1340,
          380
        ]
      },
      {
        "parameters": {
          "channel": "#accounting",
          "text": "=:page_facing_up: *New Invoice Generated*\n\n*Invoice #:* {{$json[\"invoiceNumber\"]}}\n*Client:* {{$json[\"client_name\"]}}\n*Amount:* ${{$json[\"total\"].toFixed(2)}}\n*Due Date:* {{new Date($json[\"dueDate\"]).toLocaleDateString()}}"
        },
        "name": "Send Invoice Notification",
        "type": "n8n-nodes-base.slack",
        "typeVersion": 1,
        "position": [
          1560,
          300
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT * FROM payments WHERE status = 'PENDING_RECONCILIATION'",
          "additionalFields": {}
        },
        "name": "Get Unreconciled Payments",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          240,
          540
        ]
      },
      {
        "parameters": {
          "authentication": "predefinedCredentialType",
          "operation": "list",
          "version": "v2.0"
        },
        "name": "Get Bank Transactions",
        "type": "n8n-nodes-base.paypal",
        "typeVersion": 1,
        "position": [
          460,
          540
        ]
      },
      {
        "parameters": {
          "jsCode": "// Match payments with bank transactions\nconst unreconciled = $node[\"Get Unreconciled Payments\"].json;\nconst transactions = $node[\"Get Bank Transactions\"].json;\n\nconst matched = [];\nconst unmatched = [];\n\n// Loop through each unreconciled payment\nfor (const payment of unreconciled) {\n  // Try to find matching transaction\n  const match = transactions.find(tx => {\n    // Match by amount and reference number\n    return tx.amount === payment.amount && \n           tx.reference.includes(payment.reference);\n  });\n  \n  if (match) {\n    matched.push({\n      payment_id: payment.id,\n      transaction_id: match.id,\n      amount: payment.amount,\n      status: 'RECONCILED',\n      reconciled_date: new Date().toISOString()\n    });\n  } else {\n    unmatched.push(payment);\n  }\n}\n\nreturn { matched, unmatched };"
        },
        "name": "Reconcile Payments",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          680,
          540
        ]
      },
      {
        "parameters": {
          "conditions": {
            "boolean": [],
            "number": [
              {
                "value1": "={{$json[\"matched\"].length}}",
                "operation": "notEqual",
                "value2": 0
              }
            ]
          }
        },
        "name": "Any Matched Payments?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          900,
          540
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE payments SET status = 'RECONCILED', reconciled_date = '{{$json[\"reconciled_date\"]}}', transaction_id = '{{$json[\"transaction_id\"]}}' WHERE id = {{$json[\"payment_id\"]}}",
          "options": {}
        },
        "name": "Update Payment Records",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1120,
          480
        ]
      },
      {
        "parameters": {
          "channel": "#accounting",
          "text": "=:white_check_mark: *Payment Reconciliation Complete*\n\n*Reconciled:* {{$node[\"Reconcile Payments\"].json[\"matched\"].length}} payments\n*Unmatched:* {{$node[\"Reconcile Payments\"].json[\"unmatched\"].length}} payments"
        },
        "name": "Send Reconciliation Report",
        "type": "n8n-nodes-base.slack",
        "typeVersion": 1,
        "position": [
          1340,
          540
        ]
      },
      {
        "parameters": {
          "triggerTimes": {
            "item": [
              {
                "hour": 10,
                "minute": 0
              }
            ]
          },
          "additionalFields": {
            "cronExpression": "0 10 15,30 * *"
          }
        },
        "name": "Process Expense Reports",
        "type": "n8n-nodes-base.scheduleTrigger",
        "typeVersion": 1,
        "position": [
          240,
          780
        ]
      },
      {
        "parameters": {
          "authentication": "genericCredentialType",
          "url": "https://company-api.com/expense-reports?status=pending",
          "options": {}
        },
        "name": "Get Pending Expense Reports",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 1,
        "position": [
          460,
          780
        ]
      },
      {
        "parameters": {
          "operation": "iterateAll",
          "batchSize": 5,
          "options": {}
        },
        "name": "Process Each Expense",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 1,
        "position": [
          680,
          780
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"approver_email\"]}}",
                "operation": "isNotEmpty"
              }
            ],
            "number": [
              {
                "value1": "={{$json[\"amount\"]}}",
                "operation": "smaller",
                "value2": 1000
              }
            ]
          },
          "combineOperation": "and"
        },
        "name": "Needs Approval?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          900,
          780
        ]
      },
      {
        "parameters": {
          "fromEmail": "=expenses@company.com",
          "toEmail": "={{$json[\"approver_email\"]}}",
          "subject": "=Expense Report Approval - {{$json[\"employee_name\"]}} - ${{$json[\"amount\"]}}",
          "text": "=Hello {{$json[\"approver_name\"]}},\n\nAn expense report requires your approval:\n\n- Employee: {{$json[\"employee_name\"]}}\n- Department: {{$json[\"department\"]}}\n- Amount: ${{$json[\"amount\"]}}\n- Date Submitted: {{new Date($json[\"submission_date\"]).toLocaleDateString()}}\n- Purpose: {{$json[\"purpose\"]}}\n\nPlease approve or reject this expense by clicking one of the following links:\n\n[APPROVE](https://company-portal.com/approve-expense?id={{$json[\"id\"]}}&token={{$json[\"security_token\"]}})\n\n[REJECT](https://company-portal.com/reject-expense?id={{$json[\"id\"]}}&token={{$json[\"security_token\"]}})\n\nThank you,\nExpense Management System",
          "options": {}
        },
        "name": "Send Approval Request",
        "type": "n8n-nodes-base.emailSend",
        "typeVersion": 1,
        "position": [
          1120,
          700
        ]
      },
      {
        "parameters": {
          "authentication": "genericCredentialType",
          "url": "=https://company-api.com/expense-reports/{{$json[\"id\"]}}/status",
          "method": "PUT",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "status",
                "value": "auto_approved"
              },
              {
                "name": "processed_date",
                "value": "={{$now}}"
              }
            ]
          },
          "options": {}
        },
        "name": "Auto-Approve Expense",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 1,
        "position": [
          1120,
          860
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=INSERT INTO payment_queue (employee_id, amount, purpose, approved_date, payment_status) VALUES ({{$json[\"employee_id\"]}}, {{$json[\"amount\"]}}, '{{$json[\"purpose\"]}}', '{{$now}}', 'QUEUED')",
          "options": {}
        },
        "name": "Queue For Reimbursement",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1340,
          860
        ]
      }
    ],
    "connections": {
      "Daily Financial Processing": {
        "main": [
          [
            {
              "node": "Get Pending Invoices",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Pending Invoices": {
        "main": [
          [
            {
              "node": "Process Each Invoice",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Each Invoice": {
        "main": [
          [
            {
              "node": "Generate Invoice Details",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Invoice Details": {
        "main": [
          [
            {
              "node": "Generate PDF Invoice",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate PDF Invoice": {
        "main": [
          [
            {
              "node": "Update Invoice Status",
              "type": "main",
              "index": 0
            },
            {
              "node": "Send Invoice Email",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Update Invoice Status": {
        "main": [
          [
            {
              "node": "Send Invoice Notification",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Send Invoice Email": {
        "main": [
          [
            {
              "node": "Send Invoice Notification",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Unreconciled Payments": {
        "main": [
          [
            {
              "node": "Get Bank Transactions",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Bank Transactions": {
        "main": [
          [
            {
              "node": "Reconcile Payments",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Reconcile Payments": {
        "main": [
          [
            {
              "node": "Any Matched Payments?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Any Matched Payments?": {
        "main": [
          [
            {
              "node": "Update Payment Records",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Send Reconciliation Report",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Update Payment Records": {
        "main": [
          [
            {
              "node": "Send Reconciliation Report",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },

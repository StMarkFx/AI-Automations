{
    "nodes": [
      {
        "parameters": {
          "botToken": "{{$env.TELEGRAM_BOT_TOKEN}}"
        },
        "id": "telegram-trigger",
        "name": "Telegram Trigger",
        "type": "n8n-nodes-base.telegramTrigger",
        "typeVersion": 1,
        "position": [100, 300]
      },
      {
        "parameters": {
          "operation": "executeFunction",
          "functionCode": "// Preprocess and sanitize incoming message\nconst sanitizedMessage = $input.first().json.message.text.trim();\n\n// Detect language\nconst language = detectLanguage(sanitizedMessage);\n\n// Initial intent classification\nconst intent = classifyIntent(sanitizedMessage);\n\nreturn {\n  json: {\n    originalMessage: sanitizedMessage,\n    language: language,\n    intent: intent,\n    userId: $input.first().json.message.from.id\n  }\n};\n\n// Placeholder functions - replace with actual implementations\nfunction detectLanguage(text) {\n  // Use a language detection library or API\n  return 'en'; // Default to English\n}\n\nfunction classifyIntent(text) {\n  // Use NLP to classify intent\n  const intents = [\n    'web_search', 'calculate', 'convert_currency', \n    'get_weather', 'translate', 'schedule_task', \n    'code_help', 'general_query'\n  ];\n  // Simple logic - replace with ML model\n  return intents.find(intent => text.toLowerCase().includes(intent.replace('_', ' ')) ) || 'general_query';\n}"
        },
        "id": "message-preprocessor",
        "name": "Message Preprocessor",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [300, 300]
      },
      {
        "parameters": {
          "functionCollection": [
            {
              "id": "web_search",
              "operation": "httpRequest",
              "apiEndpoint": "https://api.serpapi.com/search"
            },
            {
              "id": "calculate",
              "operation": "function",
              "method": "mathEvaluation"
            },
            {
              "id": "convert_currency",
              "operation": "httpRequest",
              "apiEndpoint": "https://api.exchangerate-api.com/v4/latest/USD"
            },
            {
              "id": "get_weather",
              "operation": "httpRequest",
              "apiEndpoint": "https://api.openweathermap.org/data/2.5/weather"
            },
            {
              "id": "translate",
              "operation": "httpRequest",
              "apiEndpoint": "https://translation.googleapis.com/language/translate/v2"
            },
            {
              "id": "code_help",
              "operation": "function",
              "method": "codeInterpreter"
            }
          ]
        },
        "id": "tool-selector",
        "name": "AI Agent Tools",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [500, 300]
      },
      {
        "parameters": {
          "operations": [
            "googleCalendar",
            "notion",
            "trello",
            "slack",
            "github"
          ]
        },
        "id": "productivity-integrations",
        "name": "Productivity Integrations",
        "type": "n8n-nodes-base.multiWebhook",
        "typeVersion": 1,
        "position": [700, 300]
      },
      {
        "parameters": {
          "model": "gpt-4",
          "temperature": 0.7,
          "maxTokens": 500
        },
        "id": "openai-reasoning",
        "name": "OpenAI Reasoning Engine",
        "type": "n8n-nodes-base.openAI",
        "typeVersion": 1,
        "position": [900, 300],
        "credentials": {
          "openAIApi": "openai-credentials"
        }
      },
